datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tasks     Task[]
  projects  Project[]
  taskTypes TaskType[]
}

model Task {
  id            String    @id @default(uuid())
  title         String
  content       String?   @db.Text
  status        String
  section       String
  order         Float
  urls          String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dueDate       DateTime?
  whenDate      DateTime?
  startedDate   DateTime?
  completedDate DateTime?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String?
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  typeId        String?
  type          TaskType? @relation(fields: [typeId], references: [id], onDelete: SetNull)
  parentId      String?
  parent        Task?     @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subtasks      Task[]    @relation("TaskHierarchy")
  blocking      TaskDependency[] @relation("BlockingTask")
  blockedBy     TaskDependency[] @relation("BlockedTask")
}

model TaskDependency {
  id          String @id @default(uuid())
  blockingId  String
  blockedById String
  blocking    Task   @relation("BlockingTask", fields: [blockingId], references: [id], onDelete: Cascade)
  blockedBy   Task   @relation("BlockedTask", fields: [blockedById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([blockingId, blockedById])
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
  @@unique([userId, name])
}

model TaskType {
  id        String   @id @default(uuid())
  name      String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
  @@unique([userId, name])
}